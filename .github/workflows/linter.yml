name: Code Formatting Check
on:
  pull_request:
jobs:
  git-commit-check:
    name: Check Git Commit Formatting
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/setup-python@v5
        with:
          python-version: '3.13'
      - name: Install Python Dependencies
        run: |
          python -m venv .venv
          source .venv/bin/activate
          pip install -r scripts/ci/requirements.txt
      - name: Check Signatures
        run: |
          for rev in $(git rev-list origin/${{ github.base_ref }}..HEAD --skip 1);
          do
              result=$(git -c log.showSignature=false show $rev --pretty="%G? %GS" --quiet)

              echo "Checking $result"

              if [[ $result == N* ]]; then
                  # Commit has no signature
                  # https://git-scm.com/docs/git-show#Documentation/git-show.txt-emGem
                  echo "ERROR: There are unsigned commits!"
                  exit 1
              fi
          done
      - name: Check Format of Git Commits
        run: |
          set -x
          source .venv/bin/activate
          git config log.showSignature false
          commits="$(git rev-list origin/${{ github.base_ref }}..HEAD --skip 1 | paste -s -d,)"
          echo "Checking commits: $commits"
          gitlint --debug --commits "$commits",
  python-check:
    name: Check Python Code Formatting
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Install Dependencies
        run: |
          sudo env DEBIAN_FRONTEND=noninteractive apt update
          sudo env DEBIAN_FRONTEND=noninteractive apt install -y python3-venv
      - name: Linting with Ruff
        run: |
          python3 -m venv .venv
          source .venv/bin/activate
          pip install ruff==0.11.3
          for python_file in $(git diff --name-only --diff-filter=ACMRTUXB origin/${{ github.base_ref }} | grep -E "\.py$");
          do
            ruff format --check -v "$python_file"
            ruff check "$python_file"
          done
  yaml-check:
    name: Check YAML Formatting
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: '>=1.21.0'
      - name: Run yamlfmt
        run: |
          go install github.com/google/yamlfmt/cmd/yamlfmt@v0.16.0
          yamlfmt -lint .
  rust-check:
    name: Check Rust Code
    runs-on: ubuntu-latest
    env:
      RUSTFLAGS: -Dwarnings
    steps:
      - uses: actions/checkout@v4
      - name: Run clippy
        run: |
          cargo clippy --workspace --all-targets --all-features -v
      - name: Run fmt
        run: |
          cargo fmt --check -v
